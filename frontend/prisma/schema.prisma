generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? 
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  type          UserType         @default(Hospital)
  emailVerified DateTime?        @map("email_verified")
  image         String?
  place String?
  accounts      Account[]
  sessions      Session[]
  requests      Requests[]
  shipments     Shipments[]
  location      FacilityLocation?

  @@map("users")
}

model Inventory {
  id          String   @id @default(cuid())
  name        String
  description String?
  quantity    Int
  price       Float
  items       Item[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("inventory")
}

model Item {
  id          String   @id @default(cuid())
  name        String
  category    ItemCategory
  expiryDate  DateTime
  status      ItemStatus
  description String?
  price       Float
  inventoryId String?  @map("inventory_id")
  shipmentId  String?  @map("shipment_id")
  requestId   String?  @map("request_id")

  inventory   Inventory? @relation(fields: [inventoryId], references: [id])
  shipment    Shipments? @relation(fields: [shipmentId], references: [id])
  request     Requests?  @relation(fields: [requestId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("items")
}

model Requests {
  id          String    @id @default(cuid())
  name        String
  description String?
  quantity    Int
  price       Float
  status      RequestStatus
  userId      String    @map("user_id")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user  User @relation(fields: [userId], references: [id], onDelete: Cascade)
  items Item[]

  @@map("requests")
}

model Shipments {
  id             String   @id @default(cuid())
  name           String
  description    String?
  quantity       Int
  price          Float
  trackingNumber String?
  status         ShipmentStatus
  userId         String   @map("user_id")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user  User @relation(fields: [userId], references: [id], onDelete: Cascade)
  items Item[]

  @@map("shipments")
}

model FacilityLocation {
  id          String   @id @default(cuid())
  address     String
  city        String
  state       String
  country     String
  postalCode  String
  latitude    Float
  longitude   Float
  userId      String   @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("facility_locations")
}

enum UserType {
  Hospital
  Supplier
}

enum ItemCategory {
  Disinfectants
  PPE
  Medical_Devices
  Medications
  Other
}

enum ItemStatus {
  Available
  Unavailable
}

enum RequestStatus {
  Pending
  Fulfilled
  Cancelled
}

enum ShipmentStatus {
  In_Transit
  Delivered
  Cancelled
}